<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Uninterned Days</title><link>https://athos.github.io/</link><description>A blog on athos's life and habits</description><generator>Hugo 0.82.0 https://gohugo.io/</generator><language>ja</language><managingEditor>athos0220@gmail.com (athos)</managingEditor><webMaster>athos0220@gmail.com (athos)</webMaster><lastBuildDate>Sun, 02 May 2021 15:26:07 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://athos.github.io/rss.xml"/><item><title>GitHub Pagesへ移行しました✍️</title><link>https://athos.github.io/post/2021/05/01/moving-to-github-pages/</link><guid isPermaLink="true">https://athos.github.io/post/2021/05/01/moving-to-github-pages/</guid><pubDate>Sat, 01 May 2021 16:38:00 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>&lt;a href="https://github.com/athos/TIL">github.com/athos/TIL&lt;/a> でホスティングしていた雑多な記事を
静的サイトとして仕立て直したのを機に、メインのブログを GitHub Pages に移行しようと思います。&lt;/p>…</description><category domain="https://athos.github.io/categories/misc/">misc</category></item><item><title>Javaのネストしたクラスたち</title><link>https://athos.github.io/post/2019/06/18/nested_classes_in_java/</link><guid isPermaLink="true">https://athos.github.io/post/2019/06/18/nested_classes_in_java/</guid><pubDate>Tue, 18 Jun 2019 22:43:10 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>最近Javaのネストしたクラス周辺について&lt;a href="https://docs.oracle.com/javase/specs/jls/se12/html/index.html">言語仕様&lt;/a>
を調べる機会があったのでまとめてみた。用語はなんとなく知っていたけど、オフィシャルな定義はよく知らなかったので。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/java/">Java</category></item><item><title>ByteBufferの使用がバイナリ互換性を破壊するケース</title><link>https://athos.github.io/post/2018/12/12/bytebuffer-breaks-binary-compatibility/</link><guid isPermaLink="true">https://athos.github.io/post/2018/12/12/bytebuffer-breaks-binary-compatibility/</guid><pubDate>Wed, 12 Dec 2018 20:05:43 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>ClojureコードをコンパイルするとJVMバイトコードが生成される。一般的には、使用するClojureのパージョンさえ固定すれば、
どのような環境でコンパイルしてもコンパイル結果として得られるバイトコードは基本的に同じはずだ。&lt;/p>
&lt;p>しかし、「どのバージョンのJava上でコンパイルしたバイトコードか」が問題になる特殊なケースがあるらしい(実際に遭遇した)ので、記録のためにメモしておく。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item><item><title>解決できないエイリアスをリードしたときにエラーにならないようにする</title><link>https://athos.github.io/post/2018/08/24/customizing-reader-alias-resolution/</link><guid isPermaLink="true">https://athos.github.io/post/2018/08/24/customizing-reader-alias-resolution/</guid><pubDate>Fri, 24 Aug 2018 15:15:04 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>Clojureの&lt;a href="https://groups.google.com/forum/#!topic/clojure/XrbBLynjpN8">MLからのネタ&lt;/a>。&lt;/p>
&lt;p>Clojureでは名前空間にエイリアスがつけられて、シンボルやキーワードでそのエイリアスを使った場合に自動的に解決してくれる機能がある：&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item><item><title>ClojureScriptでテストが失敗したときにexit(1)する</title><link>https://athos.github.io/post/2018/08/12/exit-with-nonzero-when-cljs-test-failed/</link><guid isPermaLink="true">https://athos.github.io/post/2018/08/12/exit-with-nonzero-when-cljs-test-failed/</guid><pubDate>Sun, 12 Aug 2018 11:23:53 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>CIでテストを回す場合、テストに失敗したときにCI自体も失敗してくれると嬉しい。&lt;/p>
&lt;p>Clojureだと、&lt;code>lein test&lt;/code>でテストする場合でも&lt;a href="https://github.com/cognitect-labs/test-runner">&lt;code>test-runner&lt;/code>&lt;/a>でテストする場合でも、
テストが失敗すると&lt;code>exit(1)&lt;/code>してくれるのでテストの失敗をCIも認識してくれる。&lt;/p>
&lt;p>自分で簡単なテストランナーを書く場合でも以下のようにすれば実現できる：&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojurescript/">ClojureScript</category></item><item><title>ClojureScriptマクロからコンパイラオプションを参照する</title><link>https://athos.github.io/post/2017/09/08/how-to-reference-compiler-options-from-cljs-macros/</link><guid isPermaLink="true">https://athos.github.io/post/2017/09/08/how-to-reference-compiler-options-from-cljs-macros/</guid><pubDate>Fri, 08 Sep 2017 13:44:21 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>小ネタ。&lt;/p>
&lt;p>ClojureScriptのコンパイラオプションというのは&lt;code>cljsbuild&lt;/code>で&lt;code>project.clj&lt;/code>に書いたり、
自前でビルドスクリプトを作る場合にはbuild APIに渡すアレ：&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojurescript/">ClojureScript</category></item><item><title>これからのClojureScriptの最もお手軽な起動方法？</title><link>https://athos.github.io/post/2017/08/19/easiest-way-to-start-up-cljs-in-the-future/</link><guid isPermaLink="true">https://athos.github.io/post/2017/08/19/easiest-way-to-start-up-cljs-in-the-future/</guid><pubDate>Sat, 19 Aug 2017 00:22:01 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>先日の&lt;a href="https://www.youtube.com/playlist?list=PLZdCLR02grLpzt6WENiHe16-vx74VbCw_">EuroClojure&lt;/a>
でのAlex Miller氏の基調講演で、&lt;a href="https://github.com/clojure/tools.deps.alpha">tools.deps.alpha&lt;/a>やそれを使った
インストーラ等の構想が発表された。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojurescript/">ClojureScript</category></item><item><title>ClojureScriptコンパイラにまつわる「環境」あれこれ</title><link>https://athos.github.io/post/2017/08/14/various-enviroments-in-clojurescript-compiler/</link><guid isPermaLink="true">https://athos.github.io/post/2017/08/14/various-enviroments-in-clojurescript-compiler/</guid><pubDate>Mon, 14 Aug 2017 21:00:17 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>ClojureScriptのREPLやeval、マクロ等のコンパイラが関わる部分には「環境」がいろいろ出てくる。
compiler envやanalysis env、compiler stateというのもあるし、マクロの&lt;code>&amp;amp;env&lt;/code>、
ClojureScriptで怪しげなことをやってるところでは &lt;code>env/*compiler*&lt;/code> というのもよく見かける。&lt;/p>
&lt;p>ClojureScriptコンパイラの実装を理解するうえで、これらのうち何が同じもので何が違うものなのか、
違うとしたらどう違うのかを一旦整理しておく必要がありそうだったので調べてまとめてみた。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojurescript/">ClojureScript</category></item><item><title>「2つのキーのどちらか一方のみを含むマップ」を表現するスペック</title><link>https://athos.github.io/post/2017/08/03/specing-maps-with-exclusive-keys/</link><guid isPermaLink="true">https://athos.github.io/post/2017/08/03/specing-maps-with-exclusive-keys/</guid><pubDate>Thu, 03 Aug 2017 14:30:57 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>たとえば、「整数をとる&lt;code>:x&lt;/code>というキー」と「文字列をとる&lt;code>:y&lt;/code>というキー」をもつマップのスペックは以下のように表現できる：&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item><item><title>Criteriumはevalのベンチマークには使えない</title><link>https://athos.github.io/post/2017/07/05/criterium-cannot-be-used-for-benchmarking-eval/</link><guid isPermaLink="true">https://athos.github.io/post/2017/07/05/criterium-cannot-be-used-for-benchmarking-eval/</guid><pubDate>Wed, 05 Jul 2017 09:59:06 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>ほとんどの人にとっては誰得情報かと思いますが。。。&lt;/p>
&lt;p>&lt;a href="https://github.com/hugoduncan/criterium">Criterium&lt;/a>といえば、Clojure界隈ではベンチマークツールの決定版的な位置づけのライブラリ。
外れ値の検出等の統計的な処理はもちろん、ベンチマーク結果がGCの影響を受けないようにGCをオフにしたり、JITコンパイルによってコードが
十分に最適化された状態になるまでウォームアップをしてくれたりと、JVM上でベンチマークをとるうえで気をつける必要がある点について
かなりしっかりとケアしてくれる。&lt;/p>
&lt;p>で、今回の問題はそんな手厚いケアがアダになったケースといえそう。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item><item><title>ClojureScript自身の開発のはじめかた</title><link>https://athos.github.io/post/2017/06/24/getting-started-with-clojurescript-development/</link><guid isPermaLink="true">https://athos.github.io/post/2017/06/24/getting-started-with-clojurescript-development/</guid><pubDate>Sat, 24 Jun 2017 17:32:29 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>ClojureScriptの&lt;a href="https://dev.clojure.org/jira/browse/CLJS-2119">不具合らしき挙動&lt;/a>に遭遇したのでパッチを作ろうとするも、
普段cljsbuildやらFigwheelなんかのツールを介してしかClojureScriptに触れていないので、素のClojureScriptをどう動かせばいいのか
すら分からない状態。&lt;/p>
&lt;p>とりあえず必要最低限、素のClojureScriptでの動作確認とテストをするところまではやったので、備忘録として残しておく。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojurescript/">ClojureScript</category></item><item><title>Clojarsの検索APIでライブラリ登録日によるフィルタリング</title><link>https://athos.github.io/post/2017/06/03/clojars-query-for-search-by-created-date/</link><guid isPermaLink="true">https://athos.github.io/post/2017/06/03/clojars-query-for-search-by-created-date/</guid><pubDate>Sat, 03 Jun 2017 15:22:43 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item><item><title>Associativeな値の操作関数の等価な書き換え</title><link>https://athos.github.io/post/2016/06/21/transformations-between-combinations-of-associative-fns/</link><guid isPermaLink="true">https://athos.github.io/post/2016/06/21/transformations-between-combinations-of-associative-fns/</guid><pubDate>Tue, 21 Jun 2016 17:24:46 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>&lt;code>update&lt;/code>や&lt;code>update-in&lt;/code>が便利すぎてついつい使いすぎてしまう。
気づくと「もっとストレートな書き方があるのに…」というパターン(&lt;code>update&lt;/code>+&lt;code>assoc&lt;/code>とか&lt;code>update-in&lt;/code>+&lt;code>update&lt;/code>とか)を書いていたりするのでちょっと整理してみた。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item><item><title>ReagentでエスケープされていないHTMLを埋め込む</title><link>https://athos.github.io/post/2016/05/18/embed-unescaped-html-into-reagent-dom/</link><guid isPermaLink="true">https://athos.github.io/post/2016/05/18/embed-unescaped-html-into-reagent-dom/</guid><pubDate>Wed, 18 May 2016 16:24:59 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>ClojureScriptのOmラッパーのひとつであるReagentでは、DOMをClojureScriptのデータ(ベクタやマップ)として書く。&lt;/p>
&lt;p>このDOMを表すデータに含まれる文字列はデフォルトでHTMLエスケープされる。これを回避するにはReactの&lt;code>dangerouslySetInnerHTML&lt;/code>の機能を使う。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojurescript/">ClojureScript</category></item><item><title>name関数は文字列を受け取る</title><link>https://athos.github.io/post/2016/05/17/name-function-can-accept-strings/</link><guid isPermaLink="true">https://athos.github.io/post/2016/05/17/name-function-can-accept-strings/</guid><pubDate>Tue, 17 May 2016 15:44:16 +0900</pubDate><author>athos0220@gmail.com (athos)</author><description>&lt;p>タイトルの通り。&lt;/p>
&lt;p>&lt;code>name&lt;/code>は&lt;code>namespace&lt;/code>と対になる関数で、&lt;code>c.l.Named&lt;/code>なオブジェクトの名前空間修飾を除いた名前部分の文字列を返す。&lt;/p>…</description><category domain="https://athos.github.io/categories/tech/">tech</category><category domain="https://athos.github.io/categories/programming/">programming</category><category domain="https://athos.github.io/tags/til/">TIL</category><category domain="https://athos.github.io/tags/clojure/">Clojure</category></item></channel></rss>